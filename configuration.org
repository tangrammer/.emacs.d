* (ma)git
It's Magit! A Git porcelain inside Emacs. https://magit.vc

Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. (more)

#+BEGIN_SRC emacs-lisp  :results silent
(unless (package-installed-p 'magit)
  (package-install 'magit))
(require 'magit)

(global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC


* IDO
#+BEGIN_SRC emacs-lisp :results silent

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

#+END_SRC

** idomenu
This package provides the `idomenu' command for selecting an imenu tag using
ido completion.  The buffer needs to have support for imenu already enabled.

 #+BEGIN_SRC emacs-lisp 
 (unless (package-installed-p 'idomenu)
   (package-install 'idomenu))
 (require 'idomenu)
 #+END_SRC

 #+RESULTS:
 : idomenu




* configure UI

** general configs
 #+BEGIN_SRC emacs-lisp :results silent
  ;; remove tool-bar
  (tool-bar-mode 0)

  (set-face-attribute 'default nil :height 180)

  ;; Set the default comment column to 70

  (setq-default comment-column 70)

  (set-language-environment "UTF-8")

  ;; Every time a window is started, make sure it get maximized

  (add-to-list 'default-frame-alist '(fullscreen . maximized))


  ;; switch to other frame http://stackoverflow.com/questions/93058/emacs-switching-to-another-frame-mac-os-x
  (global-set-key (kbd "M-o") 'other-frame)


  ;; save all open buffers
  (global-set-key
   (kbd "C-X C-S")
   (lambda ()
     (interactive)
     (save-some-buffers t)))


 (setq redisplay-dont-pause t
       scroll-margin 1
       scroll-step 1
       scroll-conservatively 10000
       scroll-preserve-screen-position 1)


 #+END_SRC

** win-switch nagigating windows
A utility for quickly navigating Emacs windows
#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'win-switch)
  (package-install 'win-switch))
(require 'win-switch)
(global-set-key (kbd "C-x o") 'win-switch-dispatch)
#+END_SRC

#+RESULTS:
: win-switch-dispatch



** buffers
#+BEGIN_SRC emacs-lisp :results silent
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

 
** themes

#+BEGIN_SRC emacs-lisp :results silent
;; switching themes with keys asigned
(defun theme-clojure ()
  (interactive)
  (load-theme 'solarized-dark t))

(defun theme-org ()
  (interactive)
  ;; theme recommended by toxi for LP
  (load-theme 'leuven t))

(global-set-key (kbd "C-c C-t C-c") 'theme-clojure)
(global-set-key (kbd "C-c C-t C-o") 'theme-org)

(theme-org)



;; color-theme-buffer-local
;; package-install color-theme-buffer-local
;; M-x package-install color-theme-buffer-local
;; M-x package-install load-theme-buffer-local

;; Possible completions are:
;; adwaita 	deeper-blue 	dichromacy 	leuven
;; light-blue 	manoj-dark 	misterioso 	monokai
;; solarized 	solarized-dark 	solarized-light 	tango
;; tango-dark 	tsdh-dark 	tsdh-light 	wheatgrass
;; whiteboard 	wombat

;; (defun buffer-dark ()
;;   (interactive )
;;   (load-theme-buffer-local 'misterioso (current-buffer))
;;   )

;; (defun buffer-blue ()
;;   (interactive )
;;   (load-theme-buffer-local 'light-blue (current-buffer))
;;   )

;; (defun buffer-black ()
;;   (interactive )
;;   (load-theme-buffer-local 'wheatgrass (current-buffer))
;;   )
;; (defun buffer-gray ()
;;   (interactive )
;;   (load-theme-buffer-local 'dichromacy (current-buffer))
;;   )


#+END_SRC


** moving
#+BEGIN_SRC emacs-lisp :results silent
;; ;;https://www.emacswiki.org/emacs/MoveLine
;; (defun move-line (n)
;;   "Move the current line up or down by N lines."
;;   (interactive "p")
;;   (setq col (current-column))
;;   (beginning-of-line) (setq start (point))
;;   (end-of-line) (forward-char) (setq end (point))
;;   (let ((line-text (delete-and-extract-region start end)))
;;     (forward-line n)
;;     (insert line-text)
;;     ;; restore point to original column in moved line
;;     (forward-line -1)
;;     (forward-char col)))

;; (defun move-line-up (n)
;;   "Move the current line up by N lines."
;;   (interactive "p")
;;   (move-line (if (null n) -1 (- n))))

;; (defun move-line-down (n)
;;   "Move the current line down by N lines."
;;   (interactive "p")
;;   (move-line (if (null n) 1 n)))

;; ;;(global-set-key (kbd "M-<up>") 'move-line-up)
;; ;;(global-set-key (kbd "M-<down>") 'move-line-down)


;; ;;https://www.emacswiki.org/emacs/MoveRegion
;; (defun move-region (start end n)
;;   "Move the current region up or down by N lines."
;;   (interactive "r\np")
;;   (let ((line-text (delete-and-extract-region start end)))
;;     (forward-line n)
;;     (let ((start (point)))
;;       (insert line-text)
;;       (setq deactivate-mark nil)
;;       (set-mark start))))

;; (defun move-region-up (start end n)
;;   "Move the current line up by N lines."
;;   (interactive "r\np")
;;   (move-region start end (if (null n) -1 (- n))))

;; (defun move-region-down (start end n)
;;   "Move the current line down by N lines."
;;   (interactive "r\np")
;;   (move-region start end (if (null n) 1 n)))

;;   (exec-path-from-shell-initialize))
;; (global-set-key (kbd "M-<up>") 'move-region-up)
;; (global-set-key (kbd "M-<down>") 'move-region-down) 

#+END_SRC


** project interaction
 http://projectile.readthedocs.io/en/latest/usage/
 Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing mechanism backed by external commands exists as well).

 #+BEGIN_SRC emacs-lisp :results silent
 (unless (package-installed-p 'projectile)
   (package-install 'projectile))
 (require 'projectile)
 (projectile-global-mode)
 #+END_SRC

** configure OSX keyboard 
 #+BEGIN_SRC emacs-lisp
 ;; osx keys
 (setq default-input-method "MacOSX")
 (setq mac-command-modifier 'meta)
 (setq mac-option-modifier 'none)
 #+END_SRC


* emacs help :) find things 

http://emacsredux.com/blog/2016/02/14/look-up-the-keybindings-for-some-command/
** yasnippet
A template system for Emacs http://joaotavora.github.com/yasnippet/

**YASnippet** is a template system for Emacs. It allows you to
type an abbreviation and automatically expand it into function
templates. Bundled language templates include: C, C++, C#, Perl,
Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax
is inspired from [TextMate's][textmate-snippets] syntax, you can
even [import](#import) most TextMate templates to
YASnippet. Watch [a demo on YouTube][youtube-demo].

[textmate-snippets]: http://manual.macromates.com/en/snippets
[youtube-demo]: http://www.youtube.com/watch?v=ZCGmZK4V7Sg


#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'yasnippet)
  (package-install 'yasnippet))
(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t

** which-key
 https://github.com/justbur/emacs-which-key

 =which-key= is a minor mode for Emacs that displays the key bindings
   following your currently entered incomplete command (a prefix) in a
   popup. For example, after enabling the minor mode if you enter =C-x= and wait
   for the default of 1 second the minibuffer will expand with all of the
   available key bindings that follow =C-x= (or as many as space allows given
   your settings).  This includes prefixes like =C-x 8= which are shown in a
   different face. Screenshots of what the popup will look like are included
   below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature
   sets have diverged to a certain extent.

#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'which-key)
  (package-install 'which-key))
(which-key-mode)
(which-key-setup-side-window-right)
#+END_SRC
 

* editing code

** replace highlighted text with what I type

 https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html

#+BEGIN_SRC emacs-lisp :results silent 
 (delete-selection-mode 1)
#+END_SRC




** company mode
http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'company)
  (package-install 'company))
(require 'company)
(global-company-mode)
(global-set-key (kbd "TAB") #'company-indent-or-complete-common)
#+END_SRC

*** fuzzy company :)
 #+BEGIN_SRC emacs-lisp 
 (unless (package-installed-p 'company-flx)
   (package-install 'company-flx))
 (require 'company-flx)
 (with-eval-after-load 'company
   (company-flx-mode +1))

 #+END_SRC

 #+RESULTS:
 : t



** expand region 
selecting incrementally textEmacs extension to increase selected region by semantic units.
https://github.com/magnars/expand-region.el

http://emacsrocks.com/e09.html

#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'expand-region)
  (package-install 'expand-region))
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

#+RESULTS:
: er/expand-region




** hide-show
https://www.emacswiki.org/emacs/HideShow
HideShow is a minor mode similar to OutlineMode – it hides and shows blocks of text. In particular, it hides balanced-expression code blocks and multi-line comment blocks.

#+BEGIN_SRC emacs-lisp 

(global-set-key (kbd "M-+") 'hs-show-block)
(global-set-key (kbd "M-*") 'hs-show-all)
(global-set-key (kbd "M--") 'hs-hide-block)
(global-set-key (kbd "M-Ç") 'hs-hide-level)
(global-set-key (kbd "M-:") 'hs-hide-all)

(add-hook 'clojure-mode-hook 'hs-minor-mode)
(add-hook 'cider-mode-hook 'hs-minor-mode)
(add-hook 'lisp-mode-hook 'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
#+END_SRC

#+RESULTS:
| hs-minor-mode |




** RainbowDelimiters
https://www.emacswiki.org/emacs/RainbowDelimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
 
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))
(require 'rainbow-delimiters)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

#+RESULTS:
| rainbow-delimiters-mode |


** smartparens
https://github.com/Fuco1/smartparens
https://ebzzry.github.io/emacs-pairs.html
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'smartparens)
  (package-install 'smartparens))
(require 'smartparens)
(add-hook 'clojure-mode-hook 'smartparens-mode)
(add-hook 'cider-mode-hook 'smartparens-mode)
(add-hook 'cider-repl-mode 'smartparens-mode)

(add-hook 'lisp-mode-hook 'smartparens-mode)
#+END_SRC

#+RESULTS:
| smartparens-mode | hs-minor-mode |




** multiple-cursors
 https://github.com/magnars/multiple-cursors.el
 http://emacsrocks.com/e13.html 

#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'multiple-cursors)
  (package-install 'multiple-cursors))
(require 'multiple-cursors)

(add-hook 'clojure-mode-hook 'multiple-cursors-mode) 
(add-hook 'cider-mode-hook 'multiple-cursors-mode)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC

#+RESULTS:
: mc/mark-all-like-this


** paredit
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'paredit)
  (package-install 'paredit))
(require 'paredit)

;; remove last lines inside a fn
;;https://github.com/yatish27/emacs-live/blob/master/packs/dev/clojure-pack/config/paredit-conf.el
(defun live-paredit-delete-horizontal-space ()
  (interactive)
  (just-one-space -1)
  (paredit-backward-delete))

;; should be =>>> define-key paredit-mode-map
(global-set-key   (kbd "M-\\")    'live-paredit-delete-horizontal-space)

#+END_SRC

#+RESULTS:
: live-paredit-delete-horizontal-space




** imenu

https://www.emacswiki.org/emacs/ImenuMode
Imenu produces menus for accessing locations in documents, typically in the current buffer. You can access the locations using an ordinary menu (menu bar or other) or using minibuffer completion.

#+BEGIN_SRC emacs-lisp :results silent

(global-set-key (kbd "C-x C-i") 'imenu)

#+END_SRC


* org

#+BEGIN_SRC emacs-lisp :results silent 
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC


* org + clojure 
 #+BEGIN_SRC emacs-lisp 
(require 'ob-clojure)

(setq org-babel-clojure-nrepl-timeout nil)
 
 (setq org-babel-clojure-backend 'cider)
 #+END_SRC

 #+RESULTS:
 : cider





#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'ob-http)
  (package-install 'ob-http))
(require 'ob-http)
#+END_SRC

#+RESULTS:
: ob-http


* org & org-babel
settings taken from [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/]]
#+BEGIN_SRC emacs-lisp  :results silent

(require 'ob-dot)


(org-babel-do-load-languages
  'org-babel-load-languages
  '((clojure . t)
    (dot . t)
    (shell . t)
    (sql . t)
    (http . t)
    (emacs-lisp . t)))

(setq org-export-babel-evaluate t)

(setq org-hide-emphasis-markers t)

;; http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/
(global-auto-revert-mode)  

(setq org-startup-with-inline-images t)

#+END_SRC



** emacs-htmlize
lets org to expor in html
#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'htmlize)
  (package-install 'htmlize))
(require 'htmlize)
#+END_SRC



** toc-org
generating tocs dynamically based on headings

#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'toc-org)
  (package-install 'toc-org))
(require 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)


#+END_SRC





* clojure!
if you have any problem with it you should take a look to 
(find-function 'org-babel-execute:clojure)

#+BEGIN_SRC emacs-lisp 

  (unless (package-installed-p 'clojure-mode)
    (package-install 'clojure-mode))
  (require 'clojure-mode)

  (unless (package-installed-p 'cider)
    (package-install 'cider))
  (require 'cider)

(org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
(org-defkey org-mode-map "\C-c\C-d" 'cider-doc)
(org-defkey org-mode-map "\C-c\M-j" 'cider-jack-in)

;; Show documentation/information with M-RET
(define-key lisp-mode-shared-map (kbd "M-RET") 'live-lisp-describe-thing-at-point)
(define-key cider-repl-mode-map (kbd "M-RET") 'cider-doc)
(define-key cider-mode-map (kbd "M-RET") 'cider-doc)


(add-hook 'cider-repl-mode-hook #'paredit-mode)
(add-hook 'cider-mode-hook #'paredit-mode)


;; clojure figwheel
;; https://github.com/bhauman/lein-figwheel/wiki/Running-figwheel-with-Emacs-Inferior-Clojure-Interaction-Mode
(defun figwheel-repl ()
  (interactive)
  (run-clojure "lein figwheel"))

;;(add-hook 'clojure-mode-hook #'inf-clojure-minor-mode)

(define-key cider-repl-mode-map (kbd "C-c C-o") 'cider-repl-clear-output)


;; https://github.com/stuartsierra/component/issues/55
;; emacs, init.el

;; find all buffers names which match `reg`, regex
(defun find-buffer-regex (reg)
  (interactive)
  (remove-if-not #'(lambda (x) (string-match reg x))
                 (mapcar #'buffer-name (buffer-list))))

(defun cider-execute (command)
  (interactive)
  (set-buffer (car (find-buffer-regex "cider-repl.*")))
  (goto-char (point-max))
  (insert command)
  (cider-repl-return))

(defun nrepl-reset ()
  (interactive)
  (cider-execute "(clojure.tools.namespace.repl/refresh)"))

(define-key cider-mode-map (kbd "C-c r") 'nrepl-reset)
(define-key cider-repl-mode-map (kbd "C-c r") 'nrepl-reset)

(defun nrepl-test ()
  (interactive)
  (nrepl-reset)
  (cider-execute "(duct.util.repl/test)"))
(define-key cider-mode-map (kbd "C-c t") 'nrepl-test)


(setq cider-cljs-lein-repl
      "(do (require 'figwheel-sidecar.repl-api)
           (figwheel-sidecar.repl-api/start-figwheel!)
           (figwheel-sidecar.repl-api/cljs-repl))")


(setq nrepl-log-messages t) 

(setq cider-repl-scroll-on-output nil)
(setq cider-show-eval-spinner nil)

#+END_SRC

#+RESULTS:

** lumen
 #+BEGIN_SRC emacs-lisp :results silent 
 (defun connect-lument-repl ()
   (interactive)
   (cider-connect "localhost" "47480" "~/git/akvo/akvo-lumen/backend"))
 (define-key global-map (kbd "C-c l") 'connect-lument-repl)


 #+END_SRC


 #+RESULTS:

** hugslq
#+BEGIN_SRC emacs-lisp :results silent 
;; https://github.com/rkaercher/hugsql-ghosts
;; (require 'hugsql-ghosts)

;; (add-hook 'cider-mode-hook 'hugsql-ghosts-install-hook)

#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp :results silent 
;; (with-eval-after-load 'flycheck
;;   (flycheck-pos-tip-mode))

;; (eval-after-load 'flycheck '(flycheck-clojure-setup))
;; (add-hook 'after-init-hook #'global-flycheck-mode)
;; (eval-after-load 'flycheck '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))


#+END_SRC


* agenda
[[http://sachachua.com/blog/2008/01/tagging-in-org-plus-bonus-code-for-timeclocks-and-tags/][intro to agenda tags]]
Examples of matching tags
~tag1&tag2~: tag 1 and tag 2 
~tag1-tag2~: tag1 minnus tag2
~tag1|tag2~: tag1 or tag2

#+BEGIN_SRC emacs-lisp :results silent

(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-agenda-files (list "~/git/akvo/akvo-lumen/backend/specs"))

#+END_SRC


* tidy up emacs files

** remove-all-files-ending-with-made-by-emacs
http://stackoverflow.com/questions/2680389/how-to-remove-all-files-ending-with-made-by-emacs

 #+BEGIN_SRC emacs-lisp :results silent 

 (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
   backup-by-copying t    ; Don't delink hardlinks
   version-control t      ; Use version numbers on backups
   delete-old-versions t  ; Automatically delete excess backups
   kept-new-versions 20   ; how many of the newest versions to keep
   kept-old-versions 5    ; and how many of the old
   )

 #+END_SRC


* utilities

** paths
#+BEGIN_SRC emacs-lisp :results silent 
(defun path-data*()
  (let* ((fnnd (file-name-nondirectory  (buffer-file-name)))
	(fnse (file-name-sans-extension fnnd))
	(bfn (buffer-file-name))
	(cpd (clojure-project-dir))
	(frn (file-relative-name bfn cpd))
	(path (replace-regexp-in-string  "src" "" frn))
	(path* (replace-regexp-in-string fnnd "" path))
	(res (list cpd  path* fnse )))
    res))


(defun path*(place)
   (nth place (path-data*)))

#+END_SRC


** file  to clipboard
#+BEGIN_SRC emacs-lisp :results silent 
;;http://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs
(defun tangrammer-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

;; https://gist.github.com/tangrammer/ca3e00007d560b6721818bfe385b5b98
(defun tang-copy-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as '</path/to/file>:<line-number>'"
  (interactive)
  (let ((path-with-line-number
         (concat (buffer-file-name) "::" (number-to-string (line-number-at-pos)))))
    (when path-with-line-number
      (with-temp-buffer
        (insert path-with-line-number)
        (clipboard-kill-region (point-min) (point-max)))
      (message (concat path-with-line-number " copied to clipboard")))))

(define-key global-map (kbd "M-l") 'tang-copy-current-line-position-to-clipboard)
#+END_SRC

** restclient
HTTP REST client tool for emacs
https://github.com/pashky/restclient.el

#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'restclient)
  (package-install 'restclient))
(require 'restclient)
#+END_SRC


** read-only
;; read-only-buffer
;;http://stackoverflow.com/questions/180910/how-do-i-change-read-write-mode-for-a-file-using-emacs
;;C-x C-q


** sudo-edit
#+BEGIN_SRC emacs-lisp :results silent
;; http://emacsredux.com/blog/2013/04/21/edit-files-as-root/
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
 

#+END_SRC

** github
Utilities for opening github page
https://github.com/syohex/emacs-helm-open-github


#+BEGIN_SRC emacs-lisp :results silent
;; (unless (package-installed-p 'helm)
;;   (package-install 'helm))
;; (require 'helm)

(unless (package-installed-p 'gh)
  (package-install 'gh))
(require 'gh)


(unless (package-installed-p 'helm-open-github)
  (package-install 'helm-open-github))
(require 'helm-open-github)
;; (global-set-key (kbd "C-c o f") 'helm-open-github-from-file)
;; (global-set-key (kbd "C-c o c") 'helm-open-github-from-commit)
;; (global-set-key (kbd "C-c o i") 'helm-open-github-from-issues)
;; (global-set-key (kbd "C-c o p") 'helm-open-github-from-pull-requests)


#+END_SRC

 



** logview
#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'logview)
  (package-install 'logview))
(require 'logview)
#+END_SRC



* js 
#+BEGIN_SRC emacs-lisp :results silent 
;; ;; JS CONFIG
;; ;; http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#emacs_configuration_for_eslint_and_jsx

;; ;; use web-mode for .jsx files
;; (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.js$" . hs-minor-mode))
;; (add-to-list 'auto-mode-alist '("\\.js$" . prettier-js-mode))
;; (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.jason$" . hs-minor-mode))
;; ;; http://www.flycheck.org/manual/latest/index.html
;; (require 'flycheck)

;; ;; turn on flychecking globally
;; (add-hook 'after-init-hook #'global-flycheck-mode)

;; ;; disable jshint since we prefer eslint checking
;; (setq-default flycheck-disabled-checkers
;;   (append flycheck-disabled-checkers
;;     '(javascript-jshint)))

;; ;; use eslint with web-mode for jsx files
;; (flycheck-add-mode 'javascript-eslint 'web-mode)



;; ;; customize flycheck temp file prefix
;; (setq-default flycheck-temp-prefix ".flycheck")

;; ;; disable json-jsonlist checking for json files
;; (setq-default flycheck-disabled-checkers
;;   (append flycheck-disabled-checkers
;;     '(json-jsonlist)))

;; ;; https://github.com/purcell/exec-path-from-shell
;; ;; only need exec-path-from-shell on OSX
;; ;; this hopefully sets up path and other vars better
;; (when (memq window-system '(mac ns))
;;   (exec-path-from-shell-initialize))

;; ;; use local eslint from node_modules before global
;; ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
;; (defun my/use-eslint-from-node-modules ()
;;   (let* ((root (locate-dominating-file
;;                 (or (buffer-file-name) default-directory)
;;                 "node_modules"))
;;          (eslint (and root
;;                       (expand-file-name "node_modules/eslint/bin/eslint.js"
;;                                         root))))
;;     (when (and eslint (file-executable-p eslint))
;;       (setq-local flycheck-javascript-eslint-executable eslint))))
;; (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)


;; ;; adjust indents for web-mode to 2 spaces
;; (defun my-web-mode-hook ()
;;   "Hooks for Web mode. Adjust indents"
;;   ;;; http://web-mode.org/
;;   (setq web-mode-markup-indent-offset 2)
;;   (setq web-mode-css-indent-offset 2)
;;   (setq web-mode-code-indent-offset 2))
;; (add-hook 'web-mode-hook  'my-web-mode-hook)


;; ;; for better jsx syntax-highlighting in web-mode
;; ;; - courtesy of Patrick @halbtuerke
;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
;;   (if (equal web-mode-content-type "jsx")
;;     (let ((web-mode-enable-part-face nil))
;;       ad-do-it)
;;     ad-do-it))
;; ;;https://github.com/prettier/prettier-emacs
;; (require 'prettier-js)

;; (add-hook 'js2-mode-hook 'prettier-js-mode)
;; (add-hook 'web-mode-hook 'prettier-js-mode)

#+END_SRC

* elisp
#+BEGIN_SRC emacs-lisp :results silent 
;; https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(setq enable-local-variables :all)

#+END_SRC

* sql
#+BEGIN_SRC emacs-lisp :results silent
 
;; (eval-after-load "sql"
;;   '(load-library "sql-indent"))

;; (load "~/.emacs.d/plsql/plsql.el")

;; (require 'plsql)

#+END_SRC

* md                                                               :markdown:
#+BEGIN_SRC emacs-lisp :results silent 
;; (eval-after-load "org"
;;  '(require 'ox-gfm nil t))

#+END_SRC


 

