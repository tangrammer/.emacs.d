* (ma)git
It's Magit! A Git porcelain inside Emacs. https://magit.vc

Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. (more)


#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'magit)
  (package-install 'magit))
(require 'magit)

(global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC



#+RESULTS:
: magit-status
 
* configure UI

#+BEGIN_SRC emacs-lisp
;; remove tool-bar
(tool-bar-mode 0)
#+END_SRC

#+RESULTS:

* configure OSX keyboard 
#+BEGIN_SRC emacs-lisp
;; osx keys
(setq default-input-method "MacOSX")
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'none)
#+END_SRC

* emacs help :) find things 

** yasnippet
A template system for Emacs http://joaotavora.github.com/yasnippet/

**YASnippet** is a template system for Emacs. It allows you to
type an abbreviation and automatically expand it into function
templates. Bundled language templates include: C, C++, C#, Perl,
Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax
is inspired from [TextMate's][textmate-snippets] syntax, you can
even [import](#import) most TextMate templates to
YASnippet. Watch [a demo on YouTube][youtube-demo].

[textmate-snippets]: http://manual.macromates.com/en/snippets
[youtube-demo]: http://www.youtube.com/watch?v=ZCGmZK4V7Sg


#+BEGIN_SRC emacs-lisp :results none
(unless (package-installed-p 'yasnippet)
  (package-install 'yasnippet))
(yas-global-mode 1)
#+END_SRC

** which-key
 https://github.com/justbur/emacs-which-key

 =which-key= is a minor mode for Emacs that displays the key bindings
   following your currently entered incomplete command (a prefix) in a
   popup. For example, after enabling the minor mode if you enter =C-x= and wait
   for the default of 1 second the minibuffer will expand with all of the
   available key bindings that follow =C-x= (or as many as space allows given
   your settings).  This includes prefixes like =C-x 8= which are shown in a
   different face. Screenshots of what the popup will look like are included
   below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature
   sets have diverged to a certain extent.

#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'which-key)
  (package-install 'which-key))
(which-key-mode)
(which-key-setup-side-window-right)
#+END_SRC
 

* org + clojure 
 #+BEGIN_SRC emacs-lisp 
(require 'ob-clojure)

(setq org-babel-clojure-nrepl-timeout nil)
 
 (setq org-babel-clojure-backend 'cider)
 #+END_SRC

 #+RESULTS:
 : cider







* babel
settings taken from [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/]]
#+BEGIN_SRC emacs-lisp  

(org-babel-do-load-languages
  'org-babel-load-languages
  '((clojure . t)
    (emacs-lisp . t)))

(setq org-export-babel-evaluate t)

(setq org-hide-emphasis-markers t)
#+END_SRC#

#+RESULTS:
: t



* clojure!
if you have any problem with it you should take a look to 
(find-function 'org-babel-execute:clojure)

#+BEGIN_SRC emacs-lisp 

  (unless (package-installed-p 'clojure-mode)
    (package-install 'clojure-mode))
  (require 'clojure-mode)

  (unless (package-installed-p 'cider)
    (package-install 'cider))
  (require 'cider)

#+END_SRC

#+RESULTS:
: cider

