#+TITLE: org-roam-mode

[[file:20201025233718-note_taking.org][note taking]]

[[file:20201024180511-minor_mode.org][minor-mode]]

org-roam works on top of [[file:20201024180240-org_mode.org][org-mode]]

https://github.com/jethrokuan/org-roam

* install package
 #+BEGIN_SRC elisp
(unless (package-installed-p 'org-roam)
  (package-install 'org-roam))
(require 'org-roam)

 #+END_SRC

we want to have the mode activated always so we use [[file:20201025184003-after_init_hook.org][after-init-hook]]

** add hooks
 #+BEGIN_SRC emacs-lisp :results silent


 (add-hook 'after-init-hook 'org-roam-mode)
 (make-directory "~/org-roam")
 (setq org-roam-directory "~/org-roam")


 #+END_SRC

 a default sqlite db is created 

**  some [[file:20201025182315-key_bindings.org][key bindings]] to improve the usability 
 #+BEGIN_SRC emacs-lisp :results silent 

 (add-hook 'org-mode-hook (lambda ()
                            (org-defkey org-mode-map (kbd "M-F") 'org-roam-find-file)
                            (org-defkey org-mode-map (kbd "M-I") 'org-roam-insert)
                            (org-defkey org-mode-map (kbd "M-R") 'org-roam)
                            (org-defkey org-mode-map (kbd "M-G") 'org-roam-graph)))

 #+END_SRC


* once that you call org-roam-graph you can find the graph here

doing M-l in the related graph then open it in a browser



* more than 1 roam system 
you can use .[[/Users/tangrammer/.emacs.d/configuration/.dir-locals.el::1][dir-locals]] as this configuration system


* TODO roam + babel + emacs config dependency order based on roam deps
https://github.com/tangrammer/.emacs.d/issues/2

* t/roam/go
  #+BEGIN_SRC elisp :results silent

  (defun t/roam/go (choice)
    (interactive
     (let ((completion-ignore-case  t))
       (list (completing-read "Choose: " '("roam" "roam-emacs-configuration" "roam-lumen") nil t))))
    (let ((dir (cond ((string= choice "roam-emacs-configuration" ) "~/.emacs.d/configuration/20201025113623-index.org")
                     ((string= choice "roam" ) "~/org-roam/20201027120343-index.org")
                     ((string= choice "roam-lumen" ) "~/git/akvo/akvo-lumen/backend/roam/20201102093126-index.org"))))
      (progn
        (let ((yup (find-file (extract-dir  dir))))
          (let ((default-directory (extract-dir  dir)))
            (progn

              ;;(org-roam-db-build-cache) ;; seems not necessary
              ;;(read-dir-locals default-directory) ;; finally just opening and killing the buffer to read the locals
              ;;(org-roam-build-cache)

              (call-interactively 'org-roam-find-file)
              (kill-buffer yup)
              ))))))

  (defun >t/dir/go (choice)
    (interactive
     ;; complex code here that returns a list
     (let ((completion-ignore-case  t))
       (list (completing-read "Choose: " '( "data-science" "lumen" "lumen-backend" "emacs-init-config") nil t))))
    (let ((dir (cond ((string= choice "lumen" ) "~/git/akvo/akvo-lumen")
                     ((string= choice "lumen-backend" ) "~/git/akvo/akvo-lumen/backend/project.clj")
                     ((string= choice "data-science" ) "~/git/akvo/data-science/akvo-data-science-services")
                     ((string= choice "emacs-init-config" ) "~/.emacs.d/init.el"))))
      (find-file dir)))

  #+END_SRC
