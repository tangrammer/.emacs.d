:PROPERTIES:
:ID:       6C0A8A8F-69F8-46C0-8EEE-E93B4BC06682
:END:
#+TITLE: org-mode
[[id:B39AECDA-33D7-4717-8044-E40BD40B05EC][major-mode]]

* config

  #+BEGIN_SRC emacs-lisp :results silent
  (setq org-edit-src-content-indentation 0
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-support-shift-select 'always)


  #+END_SRC


** [[id:8F3663A1-8B03-402E-BD86-6F954122BA43][org-screenshot]]

** wrap lines => Visual line mode
 #+BEGIN_SRC emacs-lisp :results silent
 (add-hook 'org-mode-hook 'visual-line-mode)
 #+END_SRC


** better org bullets => org-bullets

#+BEGIN_SRC emacs-lisp :results silent

(use-package org-bullets
  :straight t
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC



** all org subheadings in imenu => ~org-goto-interface~

#+BEGIN_SRC emacs-lisp :results silent
;; (describe-variable 'org-goto-interface )
;; (describe-variable 'org-outline-path-complete-in-steps )
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent

(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)

#+END_SRC



https://emacs.stackexchange.com/a/20762/13373




** an attempt to format using emacs-lisp
#+BEGIN_SRC emacs-lisp  :results silent
(defun org-bolder (n)
  (interactive "p")
  (when (use-region-p)
    (save-excursion
      (goto-char (region-beginning))
      (insert "*")
      (line-beginning-position))
    (save-excursion
      (goto-char (region-end))
      (insert "*")
      (line-end-position))))

(defun negrita nil
  (interactive)
  (org-emphasize ?\*))

(defun cursiva nil
  (interactive)
  (org-emphasize ?\/))

(defun subrayado nil
  (interactive)
  (org-emphasize ?\_))


(org-defkey org-mode-map (kbd "C-c b")  'negrita)
;;(org-defkey org-mode-map (kbd "C-c i")  'cursiva)
#+END_SRC






** creating timestamps
   https://orgmode.org/manual/Creating-Timestamps.html#Creating-Timestamps
   =C-c . (org-time-stamp)=
   =C-c ! (org-time-stamp-inactive)=


* org-outer-indent
https://github.com/rougier/org-outer-indent
#+BEGIN_SRC emacs-lisp :results silent
(use-package org-outer-indent
  :straight (org-outer-indent :type git :host github :repo "rougier/org-outer-indent")
;;  :config (add-hook 'org-mode-hook 'org-outer-indent-mode)
;;  (add-hook 'org-mode-hook 'org-num-mode)
  )

#+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
(defun org-num-format (numbering)
  (cond ((= (length numbering) 1)
         (concat (propertize (format " %d " (nth 0 numbering))
                             'face 'nano-face-header-faded) " "))
        (t
         (propertize
          (concat (mapconcat #'number-to-string numbering ".") " ")
          'face 'nano-face-faded))))
(setq org-num-format-function #'org-num-format)

(face-remap-add-relative 'org-document-info
                         :inherit 'nano-face-faded)
;; (face-remap-add-relative 'org-document-title
;;                          :foreground nano-color-foreground
;;                          :family "Roboto Slab"
;;                          :height 250
;;                          :weight 'medium)
(font-lock-add-keywords 'org-mode '(("\\(^*+\\) " 0 'nano-face-faded)))

(setq org-num-face 'nano-face-faded)
(setq org-hidden-keywords '(author date startup))
(setq fill-column 70)
(setq-default line-spacing 1)
#+END_SRC



* org-appear
Make invisible parts of Org elements appear visible.


https://github.com/awth13/org-appear

#+BEGIN_SRC untangle :results silent

(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :hook org-mode
  )


#+END_SRC



* minor agenda modes
  [[id:70414820-F3B0-429D-84DB-22920D8D7E8F][org-mode agenda]]
  [[id:9676C7B3-2F34-4CE8-87B5-1CDB656D7718][org-super-agenda-mode]]


* utils
  [[id:08EED441-17E3-46FA-812C-F0E6CC4A7896][org-element]]



* WAITING orq-ql
  https://github.com/alphapapa/org-ql
  An Org-mode query language, including search commands and saved views


* how to create a graph in orgfiles?

#+name: dot-eg-table
| a | Hello  |
| b | World! |



#+name: make-dot
#+BEGIN_SRC emacs-lisp :var table=dot-eg-table :results output :exports none
(mapcar #'(lambda (x)
            (princ (format "%s [label =\"%s\", shape = \"box\"];\n"
                           (first x) (second x)))) table)
(princ (format "%s -- %s;\n" (first (first table)) (first (second table))))
#+END_SRC

#+BEGIN_SRC dot :file images/test-dot.png :var input=make-dot :exports results
graph {
 $input
}
#+END_SRC



https://www.tonyballantyne.com/graphs.html#orgheadline2
https://www.graphviz.org/pdf/dotguide.pdf
