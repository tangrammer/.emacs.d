#+TITLE: org-babel
[[file:20201024180240-org_mode.org][org-mode]] [[file:20201024180511-minor_mode.org][minor-mode]]

settings taken from [[http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/][http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/]]


* untangle to not output elisp code in configuration

** DONE not output elisp code in configuration

   so ob-tangle output all elisp and emacs-lisp blocks no matter which header do you use, so instead of patching the ob-tangle.el code I'm setting up a new clone of ob-lisp.el as ob-emacs-lisp-no.el where (almost) all definitions are aliased 
   
 #+BEGIN_SRC emacs-lisp :results silent 
 (load-file "~/.emacs.d/local/ob-untangle.el")
 #+END_SRC


 below an example of using no-=elisp=
and initially the intention was to call this logic in ob-tangle.el, but nevertheless it seems that emacs tries to load ob-table.elc that so far I don't know how to compile or determine which file should emacs load on startup

 #+BEGIN_SRC untangle :exports none :eval never :tangle no
   ;; try to fix ob-tangle with exports none
(defun should-exports (source-block)
  (let ((res (null (-first (lambda (x) (and
                                    (eq (cdr x) 'none)
                                    (eq (first x) :exports))) (nth 2 source-block)))))
    (message "res %s block %s" res source-block)
    res))

 #+END_SRC


 

* conf
#+BEGIN_SRC emacs-lisp  :results silent

(require 'ob-dot)



(org-babel-do-load-languages
  'org-babel-load-languages
  '((clojure . t)
    (dot . t)
    (shell . t)
    (sql . t)
    (http . t)
    (emacs-lisp . t)))

(setq org-export-babel-evaluate t)

(setq org-hide-emphasis-markers t)

(global-auto-revert-mode)  

(setq org-startup-with-inline-images t)

#+END_SRC

** collapse sources by default
 #+BEGIN_SRC emacs-lisp :results silent 
 (add-hook 'org-mode-hook 'org-hide-block-all)

 #+END_SRC

** collapse results by default
#+BEGIN_SRC emacs-lisp :results silent 
(add-hook 'org-mode-hook 'org-babel-result-hide-all) 
#+END_SRC

** emacs-htmlize
lets org to expor in html
#+BEGIN_SRC emacs-lisp :results silent
(unless (package-installed-p 'htmlize)
  (package-install 'htmlize))
(require 'htmlize)
#+END_SRC


** tangle append 
I paste here an option to work with but there is another approach called noweb-ref
https://emacs.stackexchange.com/questions/28098/how-to-change-org-mode-babel-tangle-write-to-file-way-as-append-instead-of-overr

#+BEGIN_SRC emacs-lisp :results silent 
(defun org-babel-tangle-append ()
  "Append source code block at point to its tangle file.
The command works like `org-babel-tangle' with prefix arg
but `delete-file' is ignored."
  (interactive)
  (cl-letf (((symbol-function 'delete-file) #'ignore))
    (org-babel-tangle '(4))))

(defun org-babel-tangle-append-setup ()
  "Add key-binding C-c C-v C-t for `org-babel-tangle-append'."
  (org-defkey org-mode-map (kbd "C-c C-v +") 'org-babel-tangle-append))

(add-hook 'org-mode-hook #'org-babel-tangle-append-setup)

#+END_SRC



* org + clojure 
 #+BEGIN_SRC emacs-lisp 
(require 'ob-clojure)

(setq org-babel-clojure-nrepl-timeout nil)
 
 (setq org-babel-clojure-backend 'cider)
 #+END_SRC


* http
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'ob-http)
  (package-install 'ob-http))
(require 'ob-http)
#+END_SRC



* errors

**  Error (org-babel): Error reading results: (end-of-file)
    
  you need to add =:results= output

[[file:20201103151430-org_babel_results_of_evaluation.org][org-babel results of evaluation]]
