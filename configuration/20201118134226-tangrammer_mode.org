#+title: tangrammer-mode

[[file:20201028091004-transient_mode.org][transient-mode]]


** go to a directory using a predefined alias

   interesting the pattern matching example 
#+BEGIN_SRC emacs-lisp :results silent 
(defun -tangrammer-dir-find-file (args file)
  (if (-contains? args "projectile")
      (projectile-find-file file)
    (find-file file)))

(define-transient-command t/dir/go/data-science-command ()
  "Data-science related things"
  ["Arguments"
   ("-p" "Projectile" "projectile")]
  ["Actions"
   ("g" "general"
    (lambda (&optional args)
      (interactive
       (list (transient-args 't/dir/go/data-science-command)))
      (-tangrammer-dir-find-file args "~/git/akvo/data-science/akvo-data-science-services")))
   ("l" "example-lumen"
    (lambda (&optional args)
      (interactive
       (list (transient-args 't/dir/go/data-science-command)))
      (-tangrammer-dir-find-file args "~/git/akvo/data-science/akvo-data-science-services/projects/example-lumen")))
   ("o" "example-local"
        (lambda (&optional args)
      (interactive
       (list (transient-args 't/dir/go/data-science-command)))
      (-tangrammer-dir-find-file args "~/git/akvo/data-science/akvo-data-science-services/projects/example-local")))])

(define-transient-command t/dir/go/lumen-command ()
  "Lumen related dirs"  
  ["Actions"
   ("c" "client" (lambda (&optional args)
                          (interactive)
                          (find-file  "~/git/akvo/akvo-lumen/client/")))
   ("b" "backend" (lambda (&optional args)
                          (interactive)
                          (find-file  "~/git/akvo/akvo-lumen/backend/project.clj")))])

(define-transient-command t/dir/go/emacs ()
  "Emacs related things"
  ["Actions"
   ("c" "configuration" (lambda (&optional args)
                          (interactive)
                          (find-file  "~/.emacs.d/configuration")))
   ("i" "init.el" (lambda (&optional args)
                    (interactive)
                    (find-file  "~/.emacs.d/init.el")))])

(define-transient-command t/dir/go-command ()
  "tangrammer dir go dispatcher"
  ["Actions"
   ("d" "data-science related" t/dir/go/data-science-command)
   ("l" "lumen related" t/dir/go/lumen-command)
   ("e" "emacs related" t/dir/go/emacs)])
     #+END_SRC

* tangrammer transient options

#+BEGIN_SRC emacs-lisp :results silent 

(defun populate-babel-source-block  (name v1)
  (flet ((dummy-prompt
          (prompt choices &optional display-fn)
          (declare (ignore prompt))
          (or (find name choices :key display-fn :test #'string=)
              (throw 'notfound nil))))
    (let ((yas/prompt-functions '(dummy-prompt)))
      (catch 'notfound
        (yas/insert-snippet t)
        (insert v1)
        (execute-kbd-macro [?\t]) ;;(insert ?\t)	
        ))))


(defun t/babel/block-action (&optional args)
  (interactive
   (list (transient-args 't/babel/block-generator-command)))
  (message "%s" args)
  (-let (((a b) (->>
                 args
              (--map (split-string it "="))
              (--separate (string= "language" (first it))))))
    (-if-let  (language (-first-item a))      
        (populate-babel-source-block "block" (--reduce-from (concat acc " " it) (-last-item language) (--map (format ":%s %s" (-first-item it) (-last-item it)) b)))
      (message "you need to select a language!"))))

(transient-define-argument t/babel/language-argument ()
  "language"
  :description "choose a language"
  :class 'transient-option
  :shortarg "-l"
  :argument "language="
  :choices '("sql" "elisp" "clojure" ))

(transient-define-argument t/babel/exports-argument ()
  "exports doc"
  :description "define how to export code"
  :class 'transient-option
  :shortarg "-e"
  :argument "export="
  :choices '("none" "code" "results" "both" ))

(transient-define-argument t/babel/eval-argument ()
  "eval doc"
  :description "define how to eval code"
  :class 'transient-option
  :shortarg "-v"
  :argument "eval="
  :choices '("query" "query-export" "never" "never-export" ))

(defun t/co-authored-action (&optional args)
  (interactive
   (list (transient-args 't/co-authored-command)))
  (message "%s" args)
  (if (-contains? args "multiple")
      (call-interactively 'co-authored-multiple)
    (call-interactively 'co-authored)))

(define-transient-command t/co-authored-command ()
  "Test Transient Title"
  ["Arguments"
   ("m" "multiple authors" "multiple")]
  ["Actions"
   ("c" "Co-Authored-BY" t/co-authored-action)])

(define-transient-command t/git-command ()
  "Git related things"
  ["Actions"
   ("c" "Co-Authored-BY" t/co-authored-command)])

(define-transient-command t/babel/block-generator-command ()
  "Babel related things"
  ["Arguments"
     ("l" "language" t/babel/language-argument)
     ("e" "exports" t/babel/exports-argument)
     ("v" "eval" t/babel/eval-argument)
     ]
  ["Actions"
   ("c" "gen-block" t/babel/block-action)])

(define-transient-command >t ()
  "tangrammer dispatcher"
  ["Actions"
   ("b" "babel things" t/babel/block-generator-command)
   ("r" "roam(s)" t/roam/go)
   ("s" "sunshine? " sunshine-forecast)
   ("d" "go to 'my' dirs" t/dir/go-command)
   ("o" "org related" t/org/command)
   ("m" "git related" t/git-command)])

#+END_SRC

 #+BEGIN_SRC emacs-lisp :results silent 
 (global-set-key (kbd "<f1>") '>t)
 (global-set-key (kbd "<f2>") 't/org/command)

 #+END_SRC


#+BEGIN_SRC emacs-lisp :results silent 
(define-transient-command t/org/headlines-command ()
  "org view actions"
  ["Actions"
   ("s" "narrow-to-subtree" org-narrow-to-subtree)
   ("b" "narrow-to-block" org-narrow-to-block)
   ("w" "widen" widen)])

(define-transient-command t/org/command ()
  "Orgs related things"
  ["Actions"
   ("c" "capture" org-capture)
   ("t" "insert timestamp" (lambda () (interactive) org-insert-time-stamp))
   ("h" "headlines related" t/org/headlines-command)
   ("s" "insert screenshot" org-download-screenshot)])
#+END_SRC


 


