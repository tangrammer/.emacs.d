:PROPERTIES:
:ID:       4774DD6D-3C10-4108-9C65-C20AA09C1083
:END:
#+TITLE: Magit

[[id:96E8F7AF-A8B9-470C-A6BC-FFCD1C5927DE][Git]]

It's Magit! A Git porcelain inside Emacs. https://magit.vc

 Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains. (more)


- Installed with MELPA! thus the ~nil~ ~:straight~ value in the ~use-package~ config

 #+BEGIN_SRC emacs-lisp  :results silent
   (use-package magit
     :straight nil
     :config
     (global-set-key (kbd "C-x g") 'magit-status)
     )

 ;; (add-hook 'magit-mode-hook #'magit-todos-mode)


 #+END_SRC


* example using magit api from elisp
 #+BEGIN_SRC untangle
  (magit-git-items "log")
 (magit-log )
 #+END_SRC

 #+RESULTS:
 | transient--resume-which-key-mode |



* co-authored utils

** hard-coded list

   #+BEGIN_SRC emacs-lisp :results silent
   (defun co-authored-insert-text (choice)
     (let ((author
            (cond ((string= choice "daniel") "Daniel Sunnerek <daniel@akvo.org>")
                  ((string= choice "ivan") "Iv√°n Perdomo <ivan@perdomo.me>")
                  ((string= choice "emmanuel") "Emmanuel Mulo <emmanuel@akvo.org>")
                  ((string= choice "valeria") "Valeria Rogatchevskikh <valeria@akvo.org>")
                  ((string= choice "juan") "Juan A. Ruz <juanantonioruz@gmail.com>"))))
       (insert (format "Co-authored-by: %s" author "\n"))))

   (defvar authors '("daniel" "ivan" "emmanuel" "valeria" "marvin" "juan"))

   (defun my-read-tags ()
     (let (tags tag done)
       (while (not done)
         (setq tag (completing-read "Choose: " (cons " " (-difference authors tags)) nil t))
         (if (string= tag " ")
             (setq done t)
           (push tag tags)))
       (nreverse tags)))

   (defun co-authored-multiple (tags)
     (interactive (list (my-read-tags)))
     (--map (co-authored-insert-text it) tags))

   (defun co-authored (choice)
     (interactive
      (let ((completion-ignore-case  t))
        (list (completing-read "Choose: " authors nil t))))
     (co-authored-insert-text choice))
       #+END_SRC


#+BEGIN_SRC emacs-lisp :results silent
   (defun co-co (authors)
     (interactive "sauthors separated by comma: ")
     (insert (shell-command-to-string (format "~/.emacs.d/bashs/co-authored-by %s" authors)))
     )
#+END_SRC




** more resources
   https://github.com/punchagan/git-mob-sh




* dired-git-info
  https://github.com/clemera/dired-git-info
  Show git info in Emacs dired

  dired-git-info

  #+BEGIN_SRC untangle :results silent
    (use-package dired-git-info
      :straight t

    )
  (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable)
  #+END_SRC
