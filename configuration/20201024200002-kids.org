#+TITLE: kids


* bird's eye ..... approaching code                                :learning:
** breaking the code glass
 we don't write good code but incremental code that is being evaluated over time (history)
  (:action [pinta]
  :subject [circulo]
  :args [default1, default2])




* EMACS FOR KIDS

** TODO tangle configuration.org to be included in other repo too?


** connect git support
- we need to reset/keep changes done by newbie users
- also we need to pull emacs-for-kid functionality as it evolves/grows


*** new git newbie flow
based on start the emacs session branchin on current branch with name=current-date
after some edits we choose save-state with description and choose files to save and do a hidden commit

** connect quil with aliased functions
   - [X] programar => open buffer, cider-jack-in, eval-buffer, transparency de buffer
   - [ ] carga-los-cambios => eval-buffer ? guarda-los-cambios : extract-the-problem
   - [ ] guarda-los-cambios => si carga los cambios no genera error
   - [ ] descarta-los-cambios => vuelve a la antigua version funcional y evalua buffer 
   

** interactive functions with args


* emacs-kids start and end programming
connect cider and close repl once connected

https://orgmode.org/manual/Evaluating-Code-Blocks.html#Evaluating-Code-Blocks

#+BEGIN_SRC emacs-lisp 
(setq emacs-simple-repl nil)
(setq emacs-simple-repl-buffer nil)
(defun start-kids-programming()
  (interactive)
  (with-current-buffer (find-file-noselect "~/git/emacs-simple/quil-workflow/src/quil_workflow/funciones.clj")
    (setq cider-connected-hook (lambda ()
                                 (message "ups")
                                 (let* ((repl (cider-current-repl))
                                        (wrepl (first (get-buffer-window-list repl)))
                                        )

                                   (cider-load-file "~/git/emacs-simple/quil-workflow/src/quil_workflow/core.clj")
                                   (setq emacs-simple-repl-buffer repl)
                                   (delete-window wrepl)
                                   (tangrammer-frame-make-transparent))))  
    (setq emacs-simple-repl (cider-jack-in nil))
    (find-file "~/git/emacs-simple/quil-workflow/src/quil_workflow/core.clj")
    ))



(defun end-kids-programming ()
  (interactive)
  (cider-quit emacs-simple-repl)
  (tangrammer-frame-make-opaque)) 
#+END_SRC

#+RESULTS:
: end-kids-programming

** TODO using symbol properties instead of global state
 http://ergoemacs.org/emacs/elisp_toggle_command.html


 research below
 #+BEGIN_SRC elisp :eval never


 cider-eval-last-sexp




 (with-current-buffer (find-file-noselect "~/git/tangrammer/quil-workflow/src/quil_workflow/funciones.clj")
   (let* ((repl (cider-current-repl))
          (wrepl (first (get-buffer-window-list repl)))
          )
     (delete-window wrepl)))

 (window-buffer)

 edebug

 (process-buffer d)

 (connect d)

 /Users/tangrammer/.emacs.d/elpa/cider-20191211.1133/cider.el::1054
 cider-connect-sibling-clj

 (seq cider-connected-hook)
 split-window-below


 https://www.gnu.org/software/emacs/manual/html_node/elisp/Processes.html
 start-process



 find-file

 cider-
 cider-browse-spec-example-buffer
 cider-read-eval-buffer
 ;; This buffer is for text that is not saved, and for Lisp evaluation.
 ;; To create a file, visit it with C-x C-f and enter text in its buffer.

 magit-status
 (magit-status-internal default-directory)

 (magit-log-read-revs (magit-get-current-branch))

 (magit-log (list "HEAD"))

 (message (magit-git-str "log"))

 (get-buffer "yupie")

 (defmacro inc (f-name var)
   ``(defun ,(make-symbol ,f-name) ()
       (interactive)
       (call-interactively ',,var)))

 (inc "s" last-command)

 (make-symbol "s")

 (defun to-string (x)
   (format "%s" x))

 (defun write-fun (s)
   (interactive "sFunction name:")
   (with-current-buffer "funs.el"
     (newline)
     (insert (to-string (inc s last-command)))
     (elisp-format-buffer)
     (save-buffer)
     )  
   )
 ( find-file)
 bind

 (split-string (to-string (where-is 'find-file)) ",")

 (hash-table-count 'describe-function)
 (get 'describe-function 'function-documentation)
 (to-string (help-fns--analyze-function 'find-file))
 (get 'find-file 'function-documentation)
 (help-function-arglist 'describe-key)
 ;;(hola)



 find-file-noselect

 #+END_SRC


** frame transparency 
  
   #+BEGIN_SRC emacs-lisp
   ;; transparent :::
   (defun tangrammer-frame-make-transparent ()
     (interactive)
     (set-frame-parameter (selected-frame) 'alpha '(85 . 50)))

   (defun tangrammer-frame-make-opaque ()
     (interactive)
     (set-frame-parameter (selected-frame) 'alpha '(100 . 100)))

   ;;(set-frame-parameter (selected-frame) 'alpha '(100 . 100))
   ;; normal ::: (set-frame-parameter (selected-frame) 'alpha '(100 . 100)) 
   ;;(add-to-list 'default-frame-alist '(alpha . (100 . 100)))

   #+END_SRC

   #+RESULTS:
   : tangrammer-frame-make-opaque


   
* git support for dev users
git-newbie-flow + squash merge subbranch in master letting opt to diff and rewrite included commit messages
(offer a function to magit merge current-branch on master... leting user to chose which changes)



* recuerda
#+BEGIN_SRC emacs-lisp

(defmacro write-alias (f-name var)
  ``(defun ,(make-symbol ,f-name) ()
      (interactive)
      (call-interactively ',,var)))

;;(inc "s" last-command)

;;(make-symbol "s")

(defun to-string (x)
  (format "%s" x))

(defun recuerda (s)
  (interactive "sFunction name:")
  (with-current-buffer (find-file "~/.emacs.d/funciones.el")
    (newline)
    (insert (to-string (write-alias s last-command)))
    (newline)
    (elisp-format-buffer)
    (eval-buffer)
    (save-buffer)
    (kill-buffer)))

(with-current-buffer (find-file "~/.emacs.d/funciones.el")
  (eval-buffer)
  (save-buffer)
  (kill-buffer))
#+END_SRC

#+RESULTS:
: recuerda


** improve recuerda with last arguments functions
https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/
https://github.com/overtone/emacs-live/blob/master/init.el
