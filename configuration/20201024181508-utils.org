#+TITLE: utils

** paths
#+BEGIN_SRC emacs-lisp :results silent 
(defun path-data*()
  (let* ((fnnd (file-name-nondirectory  (buffer-file-name)))
	(fnse (file-name-sans-extension fnnd))
	(bfn (buffer-file-name))
	(cpd (clojure-project-dir))
	(frn (file-relative-name bfn cpd))
	(path (replace-regexp-in-string  "src" "" frn))
	(path* (replace-regexp-in-string fnnd "" path))
	(res (list cpd  path* fnse )))
    res))


(defun path*(place)
   (nth place (path-data*)))

#+END_SRC


** read/eval dir locals from another dir
   [[file:20201103210419-elisp_eval.org][elisp eval]]
#+BEGIN_SRC emacs-lisp :results silent 
(defun read-dir-locals (dir)
  (with-temp-buffer
    (insert-file-contents (format  "%s/.dir-locals.el" dir))
    (--map  (eval (read (format "(%s %s \"%s\")" 'setq-local (-last-item it) (rest it))))
            (eval (quote  (rest  (car (read (buffer-string)))))))))
#+END_SRC

** extract directory
   #+BEGIN_SRC emacs-lisp :results silent 
(defun extract-dir (path)
  (string-join  (butlast (split-string path "\\/")) "/"))

(extract-dir "~/git/akvo/akvo-lumen/backend/roam/20201102093126-index.org")

   #+END_SRC



** go to a directory using a predefined alias

   interesting the pattern matching example [[file:20201103210643-elisp_regex.org][elisp regex]]
#+BEGIN_SRC emacs-lisp :results silent 

(defun is-roam (path)
  (if  (string-match-p (regexp-quote "roam") path) t nil))

(defun >go (choice)
  (interactive
   ;; complex code here that returns a list
   (let ((completion-ignore-case  t))
     (list (completing-read "Choose: " '( "data-science" "lumen" "lumen-backend" "roam" "roam-emacs-configuration" "roam-lumen") nil t))))
  (let ((dir (cond ((string= choice "lumen" ) "~/git/akvo/akvo-lumen")
                   ((string= choice "lumen-backend" ) "~/git/akvo/akvo-lumen/backend/project.clj")
                   ((string= choice "data-science" ) "~/git/akvo/data-science/akvo-data-science-services")
                   ((string= choice "roam-emacs-configuration" ) "~/.emacs.d/configuration/20201025113623-index.org")
                   ((string= choice "roam" ) "~/org-roam/20201027120343-index.org")
                   ((string= choice "roam-lumen" ) "~/git/akvo/akvo-lumen/backend/roam/20201102093126-index.org")
                   (t "~/.emacs.d/init.el"))))
    (cond
     ((is-roam choice) (progn
                         (let ((yup (find-file (extract-dir  dir))))
                           (let ((default-directory (extract-dir  dir)))
                             (progn
                               
                               ;;(org-roam-db-build-cache) ;; seems not necessary
                               ;;(read-dir-locals default-directory) ;; finally just opening and killing the buffer to read the locals
                               ;;(org-roam-build-cache)
                           
                               (call-interactively 'org-roam-find-file)
                               (kill-buffer yup)
                               )))))
     (t (find-file dir)))))



     #+END_SRC



* WAITING save alias function
  #+BEGIN_SRC untangle

  (get-buffer "yupie")

  (defmacro inc (f-name var)
    ``(defun ,(make-symbol ,f-name) ()
        (interactive)
        (call-interactively ',,var)))

  (inc "s" last-command)

  (make-symbol "s")

  (defun to-string (x)
    (format "%s" x))

  (defun write-fun (s)
    (interactive "sFunction name:")
    (with-current-buffer "funs.el"
      (newline)
      (insert (to-string (inc s last-command)))
      (elisp-format-buffer)
      (save-buffer)
      )  
    )


  #+END_SRC



  
* private dropbox repo
   #+BEGIN_SRC emacs-lisp :results silent
 (defun private-git-dropbox (project-name)
        "Set a private git dropbox"
        (interactive "sEnter your project name: ")
        (let* ((pwd (string-trim (shell-command-to-string "pwd"))))
          (shell-command-to-string "git init")
          (shell-command-to-string "git add .")
          (shell-command-to-string "git commit -m \"first commit\"")
          (let ((default-directory "/Volumes/winnie/Dropbox/funicular"))
            (shell-command-to-string (format "git init --bare %s.git" project-name))
            )
          (shell-command-to-string (format "git remote add dropbox /Volumes/winnie/Dropbox/funicular/%s.git" project-name))
          (shell-command-to-string "git push -u dropbox master")
          (message "your project %s has been initialised!" project-name)))


 #+END_SRC

 #+RESULTS:
 : private-git-dropbox


 
