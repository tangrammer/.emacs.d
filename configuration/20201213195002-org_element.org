#+title: orgmode element
:PROPERTIES:
:ID:       08EED441-17E3-46FA-812C-F0E6CC4A7896
:END:

utils to work with [[id:6C0A8A8F-69F8-46C0-8EEE-E93B4BC06682][org-mode]] elements

[[id:AA646BB0-63E4-4EE3-A958-4FD9B0FEDBCC][WIP]]

https://emacs.stackexchange.com/questions/35042/parsing-an-orgmode-file-with-org-element-parse-buffer

*org-element-interpret-data* is the reciprocal operation of *org-element-parse-buffer*


https://orgmode.org/worg/dev/org-element-api.html#org0e52fe6

#+BEGIN_SRC emacs-lisp :results silent
  (defun t/org/element/name-at-point ()
    (plist-get (cadr (org-element-at-point)) :name))
#+END_SRC

* Example of *org-element-parse-buffer*
 #+BEGIN_SRC emacs-lisp
 ;; the org data is a current buffer
 (defun org-ast-buffer (buffer-n)
   (with-current-buffer buffer-n (org-mode)
                        (org-element-parse-buffer)))
 ;; eg: (org-ast-buffer "org-example.org")

 ;; the org data is a current file
 (defun org-ast (file)
   (with-temp-buffer (insert-file-contents file)
                     (org-mode)
                     (org-element-parse-buffer)))

 (defun extract-table-from-parsed-org (tb-name parsed-org-ast)
   (org-element-map parsed-org-ast 'table
     (lambda (element)
       (when (string= tb-name (org-element-property :name element))
         element))
     nil                                 ;info
     t ))

 (setq path-file "org-example.org")
 (setq datum (org-ast path-file))
 (setq tblname "data-1")

 (setq table  (extract-table-from-parsed-org tblname datum))
 ;; step-1, read table values and print values to *Messages*
 (with-temp-buffer (insert-file-contents path-file)
                   (-when-let (extracted-table (extract-table-from-parsed-org tblname datum))
                     (goto-char (org-element-property :contents-begin extracted-table))
                     (let ((contents (org-table-to-lisp)))
                       (dolist (row contents)
                         (unless (eq row 'hline)
                           (princ row)
                           (princ "\n"))))))

 ;; step-2, read table values and eval as lisp
 (defun eval-defs (path-file tblname row-fun)
   (let ((datum (org-ast path-file)))
     (with-temp-buffer (insert-file-contents path-file)
                            (-when-let (extracted-table (extract-table-from-parsed-org tblname datum))
                              (goto-char (org-element-property :contents-begin extracted-table))
                              (let ((format "lisp")
                                    (contents (org-table-to-lisp)))
                                (dolist (row contents)
                                  (funcall row-fun row)))))))
 (defun eval-code-string (s)
   (eval (car (read-from-string s))))

 (defun row-alias-fun (row)
   (unless
       ;; when not is a line not the first comlum is call function-name
       (or
        (and
         (not (eq row 'hline))
         (string= (-first-item row) "function-name") )
        (eq row 'hline))
     ;; destructure expected row pattern
     (-let (((function-name alias-function namespaces) row))
       ;; following line only print row data
       (message (format "%s - %s -%s"  (symbolp (intern function-name)) (symbolp (intern alias-function)) namespaces))
       ;; belong only generate code but don't eval it
       ;; (alias alias-function (intern function-name))
       (eval-code-string (format "%s" (alias alias-function (intern function-name)))))))

 ;; step-3, try to insert a new table row value
 (defun write-new-alias (path-file tblname fun alias categories)
   (let ((datum (org-ast path-file)))
     (with-current-buffer (find-file-noselect path-file)
       (-when-let (extracted-table (extract-table-from-parsed-org tblname datum))
         (goto-char (org-element-property :contents-end extracted-table))
         (insert (format "\t|%s|%s|%s|\n" fun alias (if categories (s-join ", " categories) "")))
         (org-table-align)
         (save-buffer))))
   ;; eval again all defs
   (eval-defs path-file tblname #'row-alias-fun))
 ;; eg (write-new-alias path-file tblname 'find-file 'wow '("chachi" "osospichi"))

 (setq categories '())

 (defun row-category-fun (row)
   (unless
       ;; when not is a line not the first comlum is call function-name
       (or
        (and
         (not (eq row 'hline))
         (string= (-first-item row) "category-name") )
        (eq row 'hline))
     ;; destructure expected row pattern
     (-let (((category-name) row))
       ;; following line only print row data
       (when category-name
        (setq categories (append (list category-name) categories)))
       (message (format "%s"  category-name))
       (format "%s"  category-name))))

 (defun load-categories-from-org-table ()
   (progn
     (setq categories '())
     (eval-defs path-file "categories" #'row-category-fun)
     categories))

 (defun read-categories-from-org-table ()
   (let (tags tag done)
     (while (not done)
       (setq tag (completing-read "Choose: " (-difference (load-categories-from-org-table) tags) nil t))
       (if (string-empty-p tag)
           (setq done t)
         (push tag tags)))
     (nreverse tags)))

 (defun read-categories ()
   (let (tags tag done)
     (while (not done)
       (setq tag (read-string "categoría: "))
       (if (string-empty-p tag)
           (setq done t)
         (push tag tags)))
     (nreverse tags)))

 (defun interactive-test-categories (title tags)
   (interactive (list (read-string "Title: ") (read-categories-from-org-table)))
   (message "%s: %s" title tags))

 (comment "already defined in aliasing_functions.el"
          (defmacro alias (f-name var)
            ``(defun ,(make-symbol ,f-name) ()
                (interactive)
                (call-interactively ',,var))))

 (defun aprende (alias categories)
   (interactive (list
                 (read-string "Tu nombre preferido de función: ")
                 (read-categories)))
   (write-new-alias path-file tblname (intern (to-string last-command)) (intern alias) categories))
 #+END_SRC




* org-element-map

 #+BEGIN_SRC emacs-lisp
 org-element-map
 #+END_SRC

* advanced implementation examples

#+DOWNLOADED: file:/Users/tangrammer/Downloads/Using-org-mode-outside-of-Emacs---sort-of.org @ 2021-11-29 13:13:48
[[file:images/20211129-131348_Using-org-mode-outside-of-Emacs---sort-of.org]]
