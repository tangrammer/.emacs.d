* top level packages

** comment macro
https://stackoverflow.com/questions/4200905/how-do-i-comment-out-sexps-in-elisp-code
  #+BEGIN_SRC emacs-lisp :results silent
 (defmacro comment (&rest body)
   "Comment out one or more s-expressions."
   nil)

  #+END_SRC

** to-string
   #+BEGIN_SRC emacs-lisp :results silent
   (defun to-string (x)
     (format "%s" x))

   #+END_SRC

** use-package
 https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool

 #+BEGIN_SRC emacs-lisp :results silent
(straight-use-package 'use-package)

 #+END_SRC



* hide-show
https://www.emacswiki.org/emacs/HideShow
HideShow is a minor mode similar to OutlineMode – it hides and shows blocks of text. In particular, it hides balanced-expression code blocks and multi-line comment blocks.

Configured in init.el

** paredit
#+BEGIN_SRC emacs-lisp :results silent
;;(setq straight-repository-branch "develop")
(straight-use-package 'paredit)
;; (use-package paredit
;;   :straight t
;;   )

#+END_SRC


** smarttabs
 #+BEGIN_SRC untangle :eval no
 (add-to-list 'load-path "~/.emacs.d/local/smarttabs")
 (require 'smart-tabs-mode)

 #+END_SRC


** define a private roam repo with lisp
 moved to [[/Users/tangrammer/.emacs.d/configuration/20201024181508-utils.org::78][configuration/utils]]


** exec-path-from-shell
https://github.com/purcell/exec-path-from-shell
   #+BEGIN_SRC emacs-lisp :results silent

;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better

(straight-use-package
 '(exec-path-from-shell :type git :host github :repo "purcell/exec-path-from-shell"))

  (use-package exec-path-from-shell

    :config
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
)


 #+END_SRC

** dash
https://github.com/magnars/dash.el

#+BEGIN_SRC emacs-lisp :results silent
(straight-use-package
 '(dash :type git :host github :repo "magnars/dash.el"))

  (use-package dash)
#+END_SRC


** helm

 #+BEGIN_SRC emacs-lisp :results silent
(straight-use-package 'helm)

 #+END_SRC


** nano

#+BEGIN_SRC emacs-lisp :results silent
(straight-use-package
 '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))

;; Window layout (optional)
;;(require 'nano-layout)

;; Theming Command line options (this will cancel warning messages)
(add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
(add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
(add-to-list 'command-switch-alist '("-default"  . (lambda (args))))

(cond
 ((member "-default" command-line-args) t)
 ((member "-dark" command-line-args) (require 'nano-theme-dark))
 (t (require 'nano-theme-light)))


;; Customize support for 'emacs -q' (Optional)
;; You can enable customizations by creating the nano-custom.el file
;; with e.g. `touch nano-custom.el` in the folder containing this file.
(let* ((this-file  (or load-file-name (buffer-file-name)))
       (this-dir  (file-name-directory this-file))
       (custom-path  (concat this-dir "nano-custom.el")))
  (when (and (eq nil user-init-file)
             (eq nil custom-file)
             (file-exists-p custom-path))
    (setq user-init-file this-file)
    (setq custom-file custom-path)
    (load custom-file)))

;; Theme
(require 'nano-faces)
(nano-faces)

(require 'nano-theme)
(nano-theme)

;;(require 'nano-theme-light)
;;(nano-theme-set-light)

;;(require 'nano-theme-light)
;;(nano-theme-set-light)

;; Nano default settings (optional)
(require 'nano-defaults)

;; Nano session saving (optional)
(require 'nano-session)

;; Nano header & mode lines (optional)
(require 'nano-modeline)

;; Nano key bindings modification (optional)
(require 'nano-bindings)

;; Nano counsel configuration (optional)
;; Needs "counsel" package to be installed (M-x: package-install)
;; (require 'nano-counsel)

;; Welcome message (optional)
(let ((inhibit-message t))
  (message "Welcome to GNU Emacs / N Λ N O edition")
  (message (format "Initialization time: %s" (emacs-init-time))))

;; Splash (optional)
(add-to-list 'command-switch-alist '("-no-splash" . (lambda (args))))
(unless (member "-no-splash" command-line-args)
  (require 'nano-splash))

;; Help (optional)
(add-to-list 'command-switch-alist '("-no-help" . (lambda (args))))
(unless (member "-no-help" command-line-args)
  (require 'nano-help))
#+END_SRC

** emacs-web-server simple-httpd


#+BEGIN_SRC emacs-lisp :results silen
(straight-use-package
 '(simple-httpd :type git :host github :repo "skeeto/emacs-web-server"))

  (use-package simple-httpd)

#+END_SRC

#+RESULTS:


* origami (Based on indentation)
A folding minor mode for Emacs
https://github.com/gregsexton/origami.el


#+BEGIN_SRC emacs-lisp :results silent
(use-package origami
  :straight (origami :type git :host github :repo "gregsexton/origami.el")
  :bind (("M-+" . origami-open-node)
         ("M--" . origami-close-node)
         ("M-Ç" . origami-recursively-toggle-node)
         ("M-*" . origami-open-all-nodes)))
#+END_SRC
